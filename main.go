package main

import (
	"fmt"
	"os"
	"regexp"
	"log"
    "encoding/json"

	"github.com/PuerkitoBio/goquery"
	"github.com/atotto/encoding/csv"
)

type AutoGeneratedCar struct {
	Ei int `json:"ei"`
	GUID string `json:"guid"`
	Mk string `json:"mk"`
	Fr string `json:"fr"`
	FrRaw string `json:"fr_raw"`
	Ot string `json:"ot"`
	At string `json:"at"`
	Ma string `json:"ma"`
	Dlup string `json:"dlup"`
	Cs string `json:"cs"`
	Md string `json:"md"`
	Imgs struct {
		Paths string `json:"paths"`
		Firstimg string `json:"firstimg"`
		Cnt int `json:"cnt"`
		Needgal bool `json:"needgal"`
	} `json:"imgs"`
	Envkv interface{} `json:"envkv"`
	Vd interface{} `json:"vd"`
	Pp string `json:"pp"`
	PriceRaw int `json:"price_raw"`
	Ci int `json:"ci"`
	Fl string `json:"fl"`
	Gr string `json:"gr"`
	Bt int `json:"bt"`
	Po int `json:"po"`
	Td bool `json:"td"`
	Vr string `json:"vr"`
	Sf bool `json:"sf"`
	Dc bool `json:"dc"`
	Ph string `json:"ph"`
	Pk string `json:"pk"`
	Ct string `json:"ct"`
	Ti bool `json:"ti"`
	Fa bool `json:"fa"`
	Frt float64 `json:"frt"`
	Isd bool `json:"isd"`
	Ns bool `json:"ns"`
	Cust string `json:"cust"`
	Sl string `json:"sl"`
	Equipment string `json:"equipment"`
	Zp string `json:"zp"`
	Sd string `json:"sd"`
	Cpn string `json:"cpn"`
	Cn string `json:"cn"`
	Crd string `json:"crd"`
	Rt struct {
		Rc interface{} `json:"rc"`
		Ra interface{} `json:"ra"`
		Rd bool `json:"rd"`
		Issng bool `json:"issng"`
	} `json:"rt"`
	St bool `json:"st"`
	IsDealer bool `json:"isDealer"`
	HasSeals bool `json:"hasSeals"`
	SealTest bool `json:"sealTest"`
	ChangeSeal bool `json:"changeSeal"`
	Bk bool `json:"bk"`
	Car bool `json:"car"`
	Tier int `json:"tier"`
	T10 bool `json:"t10"`
	T20 bool `json:"t20"`
	T30 bool `json:"t30"`
}

func ScrapeAutoScout(url string, result *[]AutoGeneratedCar) {
	fmt.Printf("Scraping %s\n", url)
	doc, err := goquery.NewDocument(url)
	if err != nil {
		log.Fatal(err)
		return
	}

	articlesFromServerRegex, _ := regexp.Compile("articlesFromServer = (.*) \\|\\|")

	articlesJson := articlesFromServerRegex.FindStringSubmatch(doc.Text())

	cars := make([]AutoGeneratedCar, 0, 80)
    json.Unmarshal([]byte(articlesJson[1]), &cars)

    for _,car := range cars {
    	fmt.Printf("ma: %s md: %s mk: %s vr: %s\n", car.Ma, car.Md, car.Mk, car.Vr)
	}

	*result = append(*result, cars...)
}

func main() {
	var results []AutoGeneratedCar
	// All cars
	//baseUrl := "http://occasions.autoscout24.nl/?atype=C&mmvmk0=46&mmvmd0=1842&cy=NL&ustate=N%2CU&ipc=home%3Asearchbox&ipl=button&zipr=200&zipc=NL&dtr=s"
	
	// MX-5
	//baseUrl := "http://occasions.autoscout24.nl/?atype=C&mmvmk0=46&mmvmd0=1842&mmvco=1&cy=NL&zipc=NL&zipr=200&ustate=N,U&sort=threetier,price&results=80&page=%d&event=pag&dtr=s"
	
	// VW Golf
	baseUrl := "http://occasions.autoscout24.nl/?atype=C&mmvmk0=74&mmvmd0=-101&mmvco=1&cy=NL&zipc=NL&zipr=200&ustate=N,U&sort=threetier,price&results=80&page=%d&event=pag&dtr=s"


	for i := 1; i <= 145; i++ {
		ScrapeAutoScout(fmt.Sprintf(baseUrl, i), &results)
	}

	f, _ := os.Create("car.txt")
	defer f.Close()

	w := csv.NewWriter(f)
	w.WriteStructAll(results)
}
